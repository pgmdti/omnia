<?php
/**
 * Created by PhpStorm.
 * User: fcoco
 * Date: 02/04/2018
 * Time: 12:05
 */

namespace App\Entity\dai\rh;

use App\Entity\Lotacao;
use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\OptionsResolver\OptionsResolver;

class EmployeeFormType extends AbstractType
{
    /**
     * @var EntityManagerInterface
     */
    private $entityManager;


    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        //parent::buildForm($builder, $options); // TODO: Change the autogenerated stub

        $builder
            ->add('classificacao', EntityType::class, array(
                    'placeholder' => 'Selecione...',
                    'class' => Classificacao::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.nome', 'ASC');
                    },
                    'choice_label' => 'nome',
                    'required' => true,
                    'empty_data' => null
                )
            )
            ->add('departamento', EntityType::class, array(
                    'placeholder' => 'Selecione...',
                    'class' => Lotacao::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.descricao', 'ASC');
                    },
                    'choice_label' => 'descricao',
                    'required' => true,
                    'empty_data' => null
                )
            )
            ->add('cedido', ChoiceType::class, array(
                'choices' => array(
                    'NÃ£o' => true,
                    'Sim' => false,
                )
            ))
            ->add('orgao', EntityType::class, array(
                    'placeholder' => 'Nenhum',
                    'class' => Orgao::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.descricao', 'ASC');
                    },
                    'choice_label' => 'descricao',
                    'required' => false,
                    'empty_data' => null
                )
            )
            ->add('matricula', NumberType::class)
            ->add('nome', TextType::class)
            ->add('endereco', TextType::class, array(
                'attr' => ['placeholder' => 'Rua/Av/Trav Bloco, Apartamento, Condominio']
            ))
            ->add('numero', TextType::class)
            ->add('bairro', TextType::class)
            ->add('cep', TextType::class, array(
                'attr' => ['data-mask' => '00000-000', 'placeholder' => '00000-000'],
            ))
            ->add('fone', TextType::class, array(
                'attr' => ['data-mask' => '(00) 00000-0000', 'placeholder' => '(00) 00000-0000'],
                'required' => false,
            ))
            ->add('email', EmailType::class, array(
                'attr' => ['placeholder' => 'email@example.com'],
                'required' => false,
                'empty_data' => null
            ))
            ->add('mae', TextType::class)
            ->add('pai', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('grauinstrucao', EntityType::class, array(
                    'placeholder' => 'Selecione...',
                    'class' => Escolaridade::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.descricao', 'ASC');
                    },
                    'choice_label' => 'descricao',
                    'required' => true,
                    'empty_data' => null
                )
            )
            ->add('cargo', EntityType::class, array(
                    'placeholder' => 'Selecione...',
                    'class' => Cargo::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.descricao', 'ASC');
                    },
                    'choice_label' => 'descricao',
                    'required' => true,
                    'empty_data' => null
                )
            )
            ->add('especializacoes', TextareaType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('estadocivil', EntityType::class, array(
                    'placeholder' => 'Selecione...',
                    'class' => Estadocivil::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.descricao', 'ASC');
                    },
                    'choice_label' => 'descricao',
                    'required' => true,
                    'empty_data' => null
                )
            )
            ->add('datanascimento', DateType::class, array(
                'widget' => 'single_text',
                'html5' => false,
                'format' => 'dd/MM/yyyy',
                'attr' => ['class' => 'js-datepicker',
                    'data-mask' => '00/00/0000',
                    'placeholder' => '00/00/0000'],
            ))
            ->add('sexo', ChoiceType::class, array(
                'placeholder' => 'Selecione...',
                'choices' => array(
                    'Masculino' => 1,
                    'Feminino' => 2,
                    'Outros' => 3,
                )
            ))
            ->add('cnh', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('categoria', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('rg', TextType::class)
            ->add('orgaoemissor', TextType::class)
            ->add('ufrg', EntityType::class, array(
                    'placeholder' => 'Estado...',
                    'class' => Estado::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.uf', 'ASC');
                    },
                    'choice_label' => 'uf',
                    'required' => true,
                    'empty_data' => null
                )
            )
            ->add('dataemissao', DateType::class, array(
                'widget' => 'single_text',
                'html5' => false,
                'format' => 'dd/MM/yyyy',
                'attr' => ['class' => 'js-datepicker',
                    'data-mask' => '00/00/0000',
                    'placeholder' => '00/00/0000'],
                'required' => false
            ))
            ->add('cpf', TextType::class, array(
                'attr' => ['data-mask' => '000.000.000-00', 'placeholder' => '000.000.000-00'],
            ))
            ->add('pispasep', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('oab', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('ctps', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('seriectps', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('certmil', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('seriecertmil', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('titulo', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('secao', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('zona', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('ufeleitor', EntityType::class, array(
                    'placeholder' => 'Estado...',
                    'class' => Estado::class,
                    'query_builder' => function (EntityRepository $er) {
                        return $er->createQueryBuilder('u')
                            ->orderBy('u.uf', 'ASC');
                    },
                    'choice_label' => 'uf',
                    'required' => false,
                    'empty_data' => null
                )
            )->add('dataposse', DateType::class, array(
                'widget' => 'single_text',
                'html5' => false,
                'format' => 'dd/MM/yyyy',
                'attr' => ['class' => 'js-datepicker',
                    'data-mask' => '00/00/0000',
                    'placeholder' => '00/00/0000']
            ))
            ->add('duracao', ChoiceType::class, array(
                'placeholder' => 'Prazo indeterminado',
                'choices' => array(
                    '03 meses' => 3,
                    '06 meses' => 6,
                    '09 meses' => 9,
                    '12 meses' => 12,
                    '18 meses' => 18,
                    '24 meses' => 24,
                ),
                'required' => false,
            ))
            ->add('datatermino', DateType::class, array(
                'widget' => 'single_text',
                'html5' => false,
                'required' => false,
                'format' => 'dd/MM/yyyy',
                'attr' => ['class' => 'js-datepicker',
                'data-mask' => '00/00/0000',
                'placeholder' => '00/00/0000']
            ))
            ->add('banco', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('agencia', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))
            ->add('conta', TextType::class, array(
                'required' => false,
                'empty_data' => null
            ))->add('files', FileType::class, array(
                'multiple' => true,
                'required' => false,
                'attr' => array( 'accept' => 'application/pdf',)
            ));

        $builder->addEventListener(FormEvents::PRE_SET_DATA, array($this, 'onPreSetDataUf'));
        $builder->addEventListener(FormEvents::PRE_SET_DATA, array($this, 'onPreSetDataUfNatu'));
        $builder->addEventListener(FormEvents::PRE_SUBMIT, array($this, 'onPreSubmitUf'));
        $builder->addEventListener(FormEvents::PRE_SUBMIT, array($this, 'onPreSubmitUfNatu'));

    }

    protected function addElementsUf(FormInterface $form, Estado $estado = null){
        $form->add('uf', EntityType::class, array(
                'placeholder' => 'Estado...',
                'class' => Estado::class,
                'data' => $estado,
                'choice_label' => 'uf',
                'required' => true,
                'empty_data' => null
            )
        );

        $cidades = array();

        if($estado){
            $repoCidades = $this->entityManager
                            ->getRepository(Cidade::class);
            $cidades = $repoCidades->findBy(array('ufid' => $estado->getId()));

            $form->add('cidade', EntityType::class, array(
                'placeholder' => 'Selecione uma cidade...',
                'class' => Cidade::class,
                'choices' => $cidades,
                'choice_label' => 'nome',
                'required' => true,
                'empty_data' => null
            ));
        }else{
            $form->add('cidade', EntityType::class, array(
                'placeholder' => 'Selecione uma cidade...',
                'class' => Cidade::class,
                'choices' => $cidades,
                'choice_label' => 'nome',
                'required' => true,
                'empty_data' => null
            ));
        }
    }

    protected function addElementsUfnatu(FormInterface $form, Estado $estado = null){
        $form->add('ufnatu', EntityType::class, array(
                'placeholder' => 'Estado...',
                'class' => Estado::class,
                'data' => $estado,
                'choice_label' => 'uf',
                'required' => true,
                'empty_data' => null
            )
        );

        $cidades = array();

        if($estado){
            $repoCidades = $this->entityManager
                ->getRepository(Cidade::class);
            $cidades = $repoCidades->findBy(array('ufid' => $estado->getId()));

            $form->add('naturalidade', EntityType::class, array(
                'placeholder' => 'Selecione uma cidade...',
                'class' => Cidade::class,
                'choices' => $cidades,
                'choice_label' => 'nome',
                'required' => true,
                'empty_data' => null
            ));
        }else{
            $form->add('naturalidade', EntityType::class, array(
                'placeholder' => 'Selecione uma cidade...',
                'class' => Cidade::class,
                'choices' => $cidades,
                'choice_label' => 'nome',
                'required' => true,
                'empty_data' => null
            ));
        }
    }

    function onPreSubmitUf(FormEvent $event){
        $form = $event->getForm();
        $data = $event->getData();
        $myuf = $this->entityManager->getRepository(Estado::class)
                    ->findOneBy(array('id' => $data['uf']));
        $this->addElementsUf($form, $myuf);
    }

    function onPreSubmitUfNatu(FormEvent $event){
        $form = $event->getForm();
        $data = $event->getData();
        $myufnatu = $this->entityManager->getRepository(Estado::class)
            ->findOneBy(array('id' => $data['ufnatu']));
        $this->addElementsUfnatu($form, $myufnatu);
    }

    function onPreSetDataUf(FormEvent $event) {
        $employee = $event->getData();
        $form = $event->getForm();
        $myuf = $employee->getUf() ? $employee->getUf() : null;
        $this->addElementsUf($form, $myuf);
    }

    function onPreSetDataUfNatu(FormEvent $event) {
        $employee = $event->getData();
        $form = $event->getForm();
        $myufnatu = $employee->getUfnatu() ? $employee->getUfnatu() : null;
        $this->addElementsUfnatu($form, $myufnatu);
    }

    public function configureOptions(OptionsResolver $resolver){
        $resolver->setDefaults(array(
           'data_class' => Employee::class
        ));
    }

}